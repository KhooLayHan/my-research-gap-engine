name: CI/CD Pipeline - Research Gap Engine

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the main branch

env:
  # Vercel environment variables specific to the CI/CD pipeline
  # These are generally needed for Vercel CLI to correctly link and deploy your project.
  # Get these from your Vercel project settings.
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }} # Optional, but good practice if you have an organization
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }} # Optional, but good practice

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Checkout the repository code

      - name: Install pnpm
        run: npm install -g pnpm # Install pnpm globally

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Set up Node.js environment
        with:
          node-version: '20' # Use Node.js LTS version 20
          cache: 'pnpm'      # Cache pnpm dependencies

      - name: Setup pnpm
        id: pnpm-setup
        uses: pnpm/action-setup@v4 # Set up pnpm environment
        with:
          version: 10 # Use pnpm version 10
          run_install: false # Run pnpm install automatically

      - name: Get pnpm store path
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT # Get the path where pnpm stores its modules
      
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-setup.outputs.STORE_PATH }} # Cache the pnpm store path
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }} # Cache key based on OS and lockfile hash
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile # Install project dependencies using pnpm

      - name: Run ESLint
        run: pnpm lint # Run ESLint checks

      - name: Run TypeScript check
        run: pnpm type-check # Ensure your type-check script is defined in package.json

      - name: Build Next.js application
        run: pnpm build # Build the Next.js project for production

      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest # Install Vercel CLI globally
      
      - name: Build with Vercel CLI
        run: |
          # Pull Vercel project settings and environment variables
          # This ensures that secrets defined in Vercel (like PERPLEXITY_API_KEY)
          # are available during the build phase in the CI environment if needed.
          # The --yes flag answers "yes" to any prompts, and --environment=production
          # ensures it pulls the production environment variables.
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} && vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel
        run: |
          # Deploy the pre-built application to Vercel.
          # --prebuilt tells Vercel to use the output from `pnpm build` directly,
          # which saves time by not rebuilding on Vercel's side.
          # --prod flag deploys to the production environment (main domain).
          # --token is required for authentication with Vercel.
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}